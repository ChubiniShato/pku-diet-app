name: Performance Tests

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths: 
      - 'services/api/**'
      - 'testing/k6/**'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'services/api/**'
      - 'testing/k6/**'

permissions:
  contents: read

concurrency:
  group: performance-${{ github.ref }}
  cancel-in-progress: true

jobs:
  k6-smoke-test:
    name: K6 Smoke Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build application
        working-directory: services/api
        run: mvn -B -DskipTests clean package

      - name: Start services
        run: |
          docker compose up -d db redis
          docker compose up -d api
          echo "Waiting for services to be healthy..."
          sleep 30

      - name: Wait for API health
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:8080/actuator/health; do echo "Waiting for API..."; sleep 5; done'
          echo "API is ready!"

      - name: Get Docker network name
        id: network
        run: |
          NETWORK=$(docker network ls --format '{{.Name}}' | grep pku-diet-app | head -1)
          echo "network=$NETWORK" >> $GITHUB_OUTPUT
          echo "Using network: $NETWORK"

      - name: Run K6 Smoke Test
        run: |
          docker run --rm \
            --network ${{ steps.network.outputs.network }} \
            -v $PWD/testing/k6:/scripts \
            --env-file /scripts/.env \
            grafana/k6:latest run /scripts/scripts/smoke.js \
            --env BASE_URL=http://api:8080

      - name: Run K6 Performance Tests (if available)
        if: hashFiles('perf/k6/*.js') != ''
        run: |
          docker run --rm \
            --network ${{ steps.network.outputs.network }} \
            -v $PWD/perf:/scripts \
            -v $PWD/testing/k6/.env:/scripts/.env \
            grafana/k6:latest run /scripts/k6/menu-generation-test.js \
            --env BASE_URL=http://api:8080
        continue-on-error: true

      - name: Show API logs on failure
        if: failure()
        run: docker compose logs api

      - name: Cleanup
        if: always()
        run: docker compose down -v
