name: Smoke Test - Production Profile

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'services/api/**'
      - '.github/workflows/smoke-prod-profile.yml'
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: smoke-prod-${{ github.ref }}
  cancel-in-progress: true

jobs:
  smoke-test-prod:
    name: Smoke Test with Prod Profile
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build application with prod profile
        working-directory: services/api
        run: mvn -B -DskipTests clean package -Pprod

      - name: Start services (prod profile)
        env:
          SPRING_PROFILES_ACTIVE: prod
          DB_URL: jdbc:postgresql://db:5432/pku
          DB_USER: pku
          DB_PASSWORD: pku_test_password
          JWT_SECRET: test-secret-key-for-smoke-testing-minimum-256-bits-required
        run: |
          docker compose up -d db redis
          docker compose up -d api
          echo "Waiting for services..."
          sleep 30

      - name: Wait for API health
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:8080/actuator/health; do echo "Waiting..."; sleep 5; done'
          echo "✅ API is healthy!"

      - name: Check Actuator endpoints
        run: |
          echo "Checking actuator endpoints..."
          curl -f http://localhost:8080/actuator/health || exit 1
          curl -f http://localhost:8080/actuator/info || exit 1
          curl -f http://localhost:8080/actuator/prometheus || exit 1
          echo "✅ All actuator endpoints are accessible"

      - name: Check Security Headers
        run: |
          echo "Checking security headers..."
          HEADERS=$(curl -sI http://localhost:8080/actuator/health)
          
          # Check for security headers
          if ! echo "$HEADERS" | grep -i "X-Content-Type-Options"; then
            echo "⚠️  Missing X-Content-Type-Options header"
          fi
          
          if ! echo "$HEADERS" | grep -i "X-Frame-Options"; then
            echo "⚠️  Missing X-Frame-Options header"
          fi
          
          if ! echo "$HEADERS" | grep -i "Strict-Transport-Security"; then
            echo "⚠️  Missing HSTS header (expected in prod)"
          fi
          
          echo "Security headers check complete"

      - name: Run K6 Smoke Test
        run: |
          NETWORK=$(docker network ls --format '{{.Name}}' | grep pku-diet-app | head -1)
          docker run --rm \
            --network $NETWORK \
            -v $PWD/testing/k6:/scripts \
            grafana/k6:latest run /scripts/scripts/smoke.js \
            --env BASE_URL=http://api:8080

      - name: Check Prometheus metrics
        run: |
          echo "Fetching Prometheus metrics..."
          METRICS=$(curl -s http://localhost:8080/actuator/prometheus)
          
          # Verify key metrics exist
          if echo "$METRICS" | grep -q "http_server_requests_seconds"; then
            echo "✅ HTTP metrics found"
          else
            echo "❌ HTTP metrics missing"
            exit 1
          fi
          
          if echo "$METRICS" | grep -q "jvm_memory_used_bytes"; then
            echo "✅ JVM metrics found"
          else
            echo "❌ JVM metrics missing"
            exit 1
          fi

      - name: Test API endpoints (basic)
        run: |
          echo "Testing basic API endpoints..."
          
          # Test OpenAPI docs
          curl -f http://localhost:8080/v3/api-docs || echo "⚠️  OpenAPI docs not accessible"
          
          # Test Swagger UI
          curl -f http://localhost:8080/swagger-ui/index.html || echo "⚠️  Swagger UI not accessible"
          
          echo "API endpoint tests complete"

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== API Logs ==="
          docker compose logs api
          echo "=== DB Logs ==="
          docker compose logs db

      - name: Cleanup
        if: always()
        run: docker compose down -v

  verify-no-dev-artifacts:
    name: Verify No Dev Artifacts
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for development artifacts
        working-directory: services/api
        run: |
          echo "Checking for development-only artifacts..."
          
          # Check application-prod.yaml settings
          if grep -q "show-sql: true" src/main/resources/application-prod.yaml; then
            echo "❌ show-sql is enabled in prod profile!"
            exit 1
          fi
          
          if grep -q "allowed-origins:.*\*" src/main/resources/application-prod.yaml; then
            echo "❌ CORS wildcard (*) found in prod profile!"
            exit 1
          fi
          
          echo "✅ No development artifacts found in prod config"
