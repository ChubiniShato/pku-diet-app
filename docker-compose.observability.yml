version: "3.8"

services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: pku
      POSTGRES_USER: pku
      POSTGRES_PASSWORD: pku
    volumes: 
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pku -d pku"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - internal

  redis:
    image: redis:7-alpine
    command: ["redis-server","--save","60","1","--loglevel","warning"]
    volumes: 
      - redisdata:/data
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - internal

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - internal
    depends_on:
      - api
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana-oss:latest
    ports:
      - "3000:3000"
    networks:
      - internal
    depends_on:
      - prometheus
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel

  api:
    build:
      context: services/api
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: prod,docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/pku
      SPRING_DATASOURCE_USERNAME: pku
      SPRING_DATASOURCE_PASSWORD: pku
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SECURITY_JWT_SECRET: change-me
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internal
      - external
    ports:
      - "8080:8080"
      - "8081:8081"
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:8081/actuator/health']
      interval: 10s
      timeout: 2s
      retries: 5

volumes:
  pgdata:
  redisdata:

networks:
  internal:
    driver: bridge
  external:
    driver: bridge
