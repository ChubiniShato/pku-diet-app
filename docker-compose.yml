services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-pku}
      POSTGRES_USER: ${DB_USER:-pku}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pku}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./services/api/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    # Temporarily disable healthcheck for faster startup
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pku} -d ${DB_NAME:-pku}"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 30s
    restart: unless-stopped

  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    environment:
      # Database
      DB_URL: ${DB_URL:-jdbc:postgresql://db:5432/pku?characterEncoding=UTF-8&useUnicode=true}
      DB_USER: ${DB_USER:-pku}
      DB_PASSWORD: ${DB_PASSWORD:-pku}
      # Application
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      SERVER_PORT: 8080
      # External services (mock-friendly)
      FCM_ENABLED: ${FCM_ENABLED:-false}
      SENDGRID_ENABLED: ${SENDGRID_ENABLED:-false}
      TWILIO_ENABLED: ${TWILIO_ENABLED:-false}
      OFF_API_ENABLED: ${OFF_API_ENABLED:-false}
      S3_ENABLED: ${S3_ENABLED:-false}
      # Defaults
      REGION_DEFAULT: ${REGION_DEFAULT:-US}
      LOCALE_DEFAULT: ${LOCALE_DEFAULT:-en_US}
      WEEK_START_DEFAULT: ${WEEK_START_DEFAULT:-MONDAY}
    depends_on:
      - db
    ports:
      - "${SERVER_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    environment:
      # API Configuration
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8080/api/v1}
      # App Configuration
      NODE_ENV: production
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "${UI_PORT:-80}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    profiles:
      - fullstack  # Only start UI with fullstack profile

volumes:
  db_data: